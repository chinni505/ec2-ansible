import boto3
import time
import calendar
import datetime
from datetime import datetime
from time import gmtime, strftime
showyear = strftime("%Y", gmtime())
showmonth= strftime("%m", gmtime())
showdate = strftime("%d", gmtime())
import json
from datetime import timedelta
import boto
import boto, boto.jsonresponse
import boto.ec2
import boto.ec2.elb
from boto.utils import (get_instance_identity)
def prepareDate(date):
        result = date.replace(' ','-')
        result = result.replace(':','-')
        return result.split('-')

def getEC2Metrics(instanceId, name_space, metricName, statistics, unit, startTime, endTime, period,regionName):

        cloud_watch = boto3.client('cloudwatch',region_name=regionName)
        response = cloud_watch.get_metric_statistics(
                Namespace=name_space,
            MetricName=metricName,
            Dimensions=[
                {
                'Name': 'InstanceId',
                'Value': instanceId
                },
        ],
            StartTime=startTime,
            EndTime=endTime,
            Period=period,
            Statistics=[statistics],
            Unit=unit
        )

        for i in response["Datapoints"]:
                Timestamp = str(i["Timestamp"])
        return response

def getEBSMetrics(volumeId, name_space, metricName, statistics, unit, startTime, endTime, period,regionName):

        cloud_watch = boto3.client('cloudwatch',region_name=regionName)
        response = cloud_watch.get_metric_statistics(
                Namespace=name_space,
            MetricName=metricName,
            Dimensions=[
                {
                'Name': 'VolumeId',
                'Value': volumeId
                },
        ],
            StartTime=startTime,
            EndTime=endTime,
            Period=period,
            Statistics=[statistics],
            Unit=unit
        )

        for i in response["Datapoints"]:
                Timestamp = str(i["Timestamp"])
                i["Timestamp"] = Timestamp

        return response

def getELBMetrics(elbName, name_space, metricName, statistics, unit, startTime, endTime, period,regionName):

        cloud_watch = boto3.client('cloudwatch',region_name=regionName)
        response = cloud_watch.get_metric_statistics(
                Namespace=name_space,
            MetricName=metricName,
            Dimensions=[
                {
                'Name': 'ELB',
                'Value': elbName
                },
        ],
            StartTime=startTime,
            EndTime=endTime,
            Period=period,
            Statistics=[statistics],
            Unit=unit
        )

        for i in response["Datapoints"]:
                Timestamp = str(i["Timestamp"])
                i["Timestamp"] = Timestamp

        return response

def vpcflowlogsuploadtos3(awsLogs,accountNumber,regionName,vpcFlowLogs,bucketName):
        to_time =int(round(time.time() * 1000))
        from_time=int( to_time -(86400*1000))
        AccountNumber=accountNumber
        RegionName = regionName
        AwsLogs=awsLogs
        VpcFlowLogs=vpcFlowLogs
        year=str(showyear)
        month=str(showmonth)
        date= str(showdate)
        client = boto3.client('logs',regionName)
        response = client.create_export_task(
        taskName='Exporttask',
        logGroupName='infosec-log-group',
        fromTime=from_time,
        to=to_time,
        destination=bucketName,
        destinationPrefix=('%s/%s/%s/%s/%s/%s/%s' %(AwsLogs,AccountNumber,VpcFlowLogs,RegionName,year,month,date))
        )

def pushToS3(bucket, key, json,regionName):
        s3 = boto3.client('s3',region_name=regionName)
        response = s3.put_object(
                Body=bytes(str(json)),
            Bucket=bucket,
            Key=key
        )

def createEC2ObjectName(Awslogs,Accountnumber,Cloudwatchlogs,Regionname,dateStart, dateEnd, Namespace, MetricName, Statistics, instanceID):

        start_time = datetime(int(dateStart[0]),int(dateStart[1]),int(dateStart[2])).strftime("%Y%m%d")
        end_time_year = datetime(int(dateEnd[0]),int(dateEnd[1]),int(dateEnd[2])).strftime("%Y")
        end_time_month = datetime(int(dateEnd[0]),int(dateEnd[1]),int(dateEnd[2])).strftime("%m")
        end_time_date = datetime(int(dateEnd[0]),int(dateEnd[1]),int(dateEnd[2])).strftime("%d")

        return Awslogs +'/'+Accountnumber +'/'+Cloudwatchlogs+'/'+Namespace+'/'+Regionname+'/'+end_time_year+'/'+end_time_month+'/'+end_time_date+'/'+Namespace+'_'+instanceID+'_'+MetricName+'_'+Statistics+'.log'

def createEBSObjectName(Awslogs,Accountnumber,Cloudwatchlogs,Regionname,dateStart, dateEnd, Namespace, MetricName, Statistics, volumeID):

        start_time = datetime(int(dateStart[0]),int(dateStart[1]),int(dateStart[2])).strftime("%Y%m%d")
        end_time_year = datetime(int(dateEnd[0]),int(dateEnd[1]),int(dateEnd[2])).strftime("%Y")
        end_time_month = datetime(int(dateEnd[0]),int(dateEnd[1]),int(dateEnd[2])).strftime("%m")
        end_time_date = datetime(int(dateEnd[0]),int(dateEnd[1]),int(dateEnd[2])).strftime("%d")

        return Awslogs +'/'+Accountnumber +'/'+Cloudwatchlogs+'/'+Namespace+'/'+Regionname+'/'+end_time_year+'/'+end_time_month+'/'+end_time_date+'/'+Namespace+'_'+volumeID+'_'+MetricName+'_'+Statistics+'.log'

def createELBObjectName(Awslogs,Accountnumber,Cloudwatchlogs,Regionname,dateStart, dateEnd, Namespace, MetricName, Statistics, elbName):

        start_time = datetime(int(dateStart[0]),int(dateStart[1]),int(dateStart[2])).strftime("%Y%m%d")
        end_time_year = datetime(int(dateEnd[0]),int(dateEnd[1]),int(dateEnd[2])).strftime("%Y")
        end_time_month = datetime(int(dateEnd[0]),int(dateEnd[1]),int(dateEnd[2])).strftime("%m")
        end_time_date = datetime(int(dateEnd[0]),int(dateEnd[1]),int(dateEnd[2])).strftime("%d")

        return Awslogs +'/'+Accountnumber +'/'+Cloudwatchlogs+'/'+Namespace+'/'+Regionname+'/'+end_time_year+'/'+end_time_month+'/'+end_time_date+'/'+Namespace+'_'+elbName+'_'+MetricName+'_'+Statistics+'.log'


def main():

        cwWindow = 1440
        timestart1=datetime.utcnow() - timedelta(minutes=cwWindow )
        timeend1=datetime.utcnow()
        awslogs='AWSLogs'
        vpcflowlogs = 'VPCFlowLogs'
        conn_acc = boto.connect_sts()
        e = boto.jsonresponse.Element()
        boto.jsonresponse.XmlHandler(e, conn_acc).parse(conn_acc.make_request('GetCallerIdentity',{},'/','POST').read())
        accountnumber= e['GetCallerIdentityResponse']['GetCallerIdentityResult']['Account']
        cloudwatchlogs='CloudWatchLogs'
        data = boto.utils.get_instance_identity()
        regionname = data['document']['region']
        name_space = ['EC2','EBS','ELB']
        bucket_name = str(accountnumber) + '-' + str(regionname) + '-' + 'logs'
        ec2_metric_list = ['CPUUtilization', 'DiskReadOps', 'DiskWriteOps', 'NetworkIn', 'NetworkOut', 'NetworkPacketsIn', 'NetworkPacketsOut']
        ebs_metric_list = ['VolumeReadOps', 'VolumeWriteOps', 'VolumeIdleTime']
        elb_metric_list = ['BackendConnectionErrors','HealthyHostCount','HTTPCode_Backend_2XX','HTTPCode_Backend_4XX','HTTPCode_Backend_5XX','Latency','RequestCount','UnHealthyHostCount']
        statistic = 'Average'
        unit = ['Count','Gigabytes']
        period = 300
        dateStart=timestart1.strftime("%Y-%m-%d %H:%M:%S")
        dateEnd=timeend1.strftime("%Y-%m-%d %H:%M:%S")
        dateStart =  prepareDate(dateStart)
        dateEnd = prepareDate(dateEnd)
        startTime = datetime(int(dateStart[0]),int(dateStart[1]),int(dateStart[2]),int(dateStart[3]),int(dateStart[4]),int(dateStart[5])).isoformat('T')+'Z'
        endTime = datetime(int(dateEnd[0]),int(dateEnd[1]),int(dateEnd[2]),int(dateEnd[3]),int(dateEnd[4]),int(dateEnd[5])).isoformat('T')+'Z'
        vpcflowlogsuploadtos3(awslogs,accountnumber,regionname,vpcflowlogs,bucket_name)
        conn=boto.ec2.connect_to_region(regionname)
        reservations = conn.get_all_instances()
        for res in reservations:
           for inst in res.instances:
               for ec2_metric_name in ec2_metric_list:
                  response = getEC2Metrics(inst.id,name_space[0],ec2_metric_name,statistic,unit[0],startTime,endTime,period,regionname)
                  pushToS3(bucket_name, createEC2ObjectName(awslogs,accountnumber,cloudwatchlogs,regionname,dateStart,dateEnd,name_space[0],ec2_metric_name,statistic,inst.id),response, regionname)

        volumes = conn.get_all_volumes()
        for volume in volumes:
           for ebs_metric_name in ebs_metric_list:
              response = getEBSMetrics(volume.id,name_space[1],ebs_metric_name,statistic,unit[1],startTime,endTime,period,regionname)
              pushToS3(bucket_name, createEBSObjectName(awslogs,accountnumber,cloudwatchlogs,regionname,dateStart,dateEnd,name_space[1],ebs_metric_name,statistic,volume.id), response, regionname)

        conn_elb=boto.ec2.elb.connect_to_region(regionname)
        elbs = conn_elb.get_all_load_balancers()
        for elb in elbs:
           for elb_metric_name in elb_metric_list:
               response = getELBMetrics(elb.name,name_space[2],elb_metric_name,statistic,unit[0],startTime,endTime,period,regionname)
               pushToS3(bucket_name, createELBObjectName(awslogs,accountnumber,cloudwatchlogs,regionname,dateStart,dateEnd,name_space[2],elb_metric_name,statistic,elb.name), response, regionname)

if __name__ == "__main__":
    main()


